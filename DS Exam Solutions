DS Exam Questions Solution

For tomorrow all of you practice the linked list
Program for deletion
1. At beginning
2. At spesific location
Q2: insertion at a specific position in a singly linked list

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Q.1 > Delete a node from the beginning of a singly linked list

ans.


// C program to delete a node from the beginning of the given
// linked list
#include <stdio.h>
#include <stdlib.h>

// Node structure for the linked list
struct Node {
    int data;
    struct Node* next;
};


// Function to delete the head node
struct Node* deleteHead(struct Node* head)
{
    // Base case if linked list is empty
    if (head == NULL)
        return NULL;

    // Store the current head in a temporary variable
    struct Node* temp = head;

    // Move the head to the next node
    head = head->next;

    // Free the memory of the old head node
    free(temp);

    // Return the new head
    return head;
}

// Function to print the linked list
void printList(struct Node* head)
{
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

// Function to create a new node
struct Node* createNode(int data)
{
    struct Node* node
        = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->next = NULL;
    return node;
}

int main()
{
    // Creating a linked list
    // 1 -> 2 -> 3 -> 4 -> 5 -> NULL
    struct Node* head = createNode(1);
    head->next = createNode(2);
    head->next->next = createNode(3);
    head->next->next->next = createNode(4);
    head->next->next->next->next = createNode(5);

    printf("Original list: ");
    printList(head);

    // Deleting the head node
    head = deleteHead(head);

    printf("List after deleting the head: ");
    printList(head);

    return 0;
}

o/p - 
Original list: 1 -> 2 -> 3 -> 4 -> 5 -> nullptr
List after deleting the head: 2 -> 3 -> 4 -> 5 -> nullptr



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Q.2 > Delete a node from the specific position of a singly linked list

ans.







// C program to delete a linked list node at a given
// position

#include <stdio.h>
#include <stdlib.h>

// Node structure for the linked list
struct Node {
    int data;
    struct Node* next;
};

struct Node* newNode(int data)
{
    struct Node* node
        = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->next = NULL;
    return node;
}

// Function to delete a node at a given position
struct Node* deleteNode(struct Node* head, int position)
{
    struct Node* temp = head;
    struct Node* prev = NULL;

    // Base case if linked list is empty
    if (temp == NULL)
        return head;

    // Case 1: Head is to be deleted
    if (position == 1) {
        head = temp->next;
        free(temp);
        return head;
    }

    // Case 2: Node to be deleted is in middle
    // Traverse till given position
    for (int i = 1; temp != NULL && i < position; i++) {
        prev = temp;
        temp = temp->next;
    }

    // If given position is found, delete node
    if (temp != NULL) {
        prev->next = temp->next;
        free(temp);
    }
    else {
        printf("Data not present\n");
    }

    return head;
}

void printList(struct Node* head)
{
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

// Driver code
int main()
{
    struct Node* head = newNode(1);
    head->next = newNode(2);
    head->next->next = newNode(3);
    head->next->next->next = newNode(4);
    head->next->next->next->next = newNode(5);

    printf("Original list: ");
    printList(head);

    int position = 2;
    head = deleteNode(head, position);

    printf("List after deletion: ");
    printList(head);

    // Cleanup remaining nodes
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}




o/p = 
Original list: 1 -> 2 -> 3 -> 4 -> 5 -> nullptr
List after deletion : 1 -> 3 -> 4 -> 5 -> nullptr











------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










Q3: insertion at a specific position in a singly linked list


ans. 







// C program for insertion in a single linked
// list at a specified position
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

struct Node *createNode(int x);

// Function to insert a Node at the required position
struct Node *insertPos(struct Node *head, int pos, int data) {

    // return if invalid input
    if (pos < 1)
        return head;

    // Head will change if pos=1
    if (pos == 1) {
        struct Node *newNode = createNode(data);
        newNode->next = head;
        return newNode;
    }

    struct Node *curr = head;

    // Traverse to the node that will be
    // present just before the new node
    for (int i = 1; i < pos - 1 && curr != NULL; i++) {
        curr = curr->next;
    }
    
    // if position is greater than
    // number of nodes
    if (curr == NULL) 
        return head;
        
    struct Node *newNode = createNode(data);

    // Update the next pointers
    newNode->next = curr->next;
    curr->next = newNode;

    return head;
}

void printList(struct Node *head) {
    struct Node *curr = head;
    while (curr != NULL) {
        printf("%d ", curr->data);
        curr = curr->next;
    }
    printf("\n");
}

struct Node *createNode(int x) {
    struct Node *new_node = 
      (struct Node *)malloc(sizeof(struct Node));
    new_node->data = x;
    new_node->next = NULL;
    return new_node;
}

int main() {

    // Creating the list 3->5->8->10
    struct Node *head = createNode(3);
    head->next = createNode(5);
    head->next->next = createNode(8);
    head->next->next->next = createNode(10);

    int data = 12, pos = 3;
    head = insertPos(head, pos, data);
    printList(head);

    return 0;
}





Output -
3 5 12 8 10 




