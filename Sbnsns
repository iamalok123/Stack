#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 10

// Structure to represent the stack
struct Stack {
    int items[MAX_SIZE];
    int top;
};

// Function to initialize the stack
void initialize(struct Stack *stack) {
    stack->top = -1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack *stack) {
    return stack->top == -1;
}

// Function to check if the stack is full
int isFull(struct Stack *stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an element onto the stack


void push(struct Stack *stack, int value) {
    if (isFull(stack)) {
printf("Stack overflow! Cannot push %d\n", value);
    } else {
        stack->items[++stack->top] = value;
printf("%d pushed to the stack\n", value);
    }
}

// Function to pop an element from the stack
int pop(struct Stack *stack) {
    if (isEmpty(stack)) {
printf("Stack underflow! Cannot pop from an empty stack\n");
        return -1; // indicating an error
    } else {
        return stack->items[stack->top--];
    }
}

// Function to display the elements of the stack
void display(struct Stack *stack) {
    if (isEmpty(stack)) {
printf("Stack is empty\n");
    } else {
printf("Stack elements: ");
        for (int i = 0; i<= stack->top; i++) {
printf("%d ", stack->items[i]);


        }
printf("\n");
    }
}
int main() {
    struct Stack myStack;
    initialize(&myStack);
push(&myStack, 5);
push(&myStack, 10);
push(&myStack, 15);
    display(&myStack);
printf("Popped element: %d\n", pop(&myStack));
printf("Popped element: %d\n", pop(&myStack));

    display(&myStack);

    return 0;
}
