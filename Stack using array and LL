Array implementation of Stack

In array implementation, the stack is formed by using the array. All the operations regarding the stack are performed using arrays. Lets see how each operation can be implemented on the stack using array data structure.

Adding an element onto the stack (push operation)

Adding an element into the top of the stack is referred to as push operation. Push operation involves following two steps.

1.	Increment the variable Top so that it can now refere to the next memory location.

2.	Add element at the position of incremented top. This is referred to as adding new element at the top of the stack.

Stack is overflow when we try to insert an element into a completely filled stack therefore, our main function must always avoid stack overflow condition.

Algorithm:

1.	begin   

2.	    if top = n then stack full   (overflow)

3.	    top = top + 1  

4.	    stack (top) : = item;  

5.	end   

Implementation of push algorithm in C language

1.	void push (int val,int n) //n is size of the stack   

2.	{  

3.	    if (top == n )   

4.	    printf("\n Overflow");   

5.	    else   

6.	    {  

7.	    top = top +1;   

8.	    stack[top] = val;   

9.	    }   

10.	}   





Deletion of an element from a stack (Pop operation)

Deletion of an element from the top of the stack is called pop operation. The value of the variable top will be incremented by 1 whenever an item is deleted from the stack. The top most element of the stack is stored in an another variable and then the top is decremented by 1. the operation returns the deleted value that was stored in another variable as the result.

The underflow condition occurs when one try to delete an element from an already empty stack.

Algorithm :

1.	begin   

2.	    if top = 0 then stack empty;   (underflow)

3.	    item := stack(top);  

4.	    top = top - 1;  

5.	end;    

Implementation of POP algorithm using C language

1.	int pop ()  

2.	{   

3.	    if(top == -1)    

4.	    {  

5.	        printf("Underflow");  

6.	        return 0;  

7.	    }  

8.	    else  

9.	    {  

10.	        return stack[top - - ];   

11.	    }    

12.	}   

Visiting each element of the stack (Peek operation)

Peek operation involves returning the element which is present at the top of the stack without deleting it. Underflow condition can occur if we try to return the top element in an already empty stack.

Algorithm :

PEEK (STACK, TOP)

1.	Begin   

2.	    if top = -1 then stack empty    

3.	    item = stack[top]  

4.	    return item  

5.	End    

Implementation of Peek algorithm 

1.	int peek()  

2.	{  

3.	    if (top == -1)   

4.	    {  

5.	        printf("Underflow");  

6.	        return 0;   

7.	    }  

8.	    else  

9.	    {  

10.	        return stack [top];  

11.	    }  

12.	}  

C program

1.	#include <stdio.h>   

2.	int stack[100],i,j,choice=0,n,top=-1;  

3.	void push();  

4.	void pop();  

5.	void show();  

6.	void main ()  

7.	{  

8.	      

9.	    printf("Enter the number of elements in the stack ");   

10.	    scanf("%d",&n);  

11.	    printf("*********Stack operations using array*********");  

12.	  

13.	printf("\n----------------------------------------------\n");  

14.	    while(choice != 4)  

15.	    {  

16.	        printf("Chose one from the below options...\n");  

17.	        printf("\n1.Push\n2.Pop\n3.Show\n4.Exit");  

18.	        printf("\n Enter your choice \n");        

19.	        scanf("%d",&choice);  

20.	        switch(choice)  

21.	        {  

22.	            case 1:  

23.	            {   

24.	                push();  

25.	                break;  

26.	            }  

27.	            case 2:  

28.	            {  

29.	                pop();  

30.	                break;  

31.	            }  

32.	            case 3:  

33.	            {  

34.	                show();  

35.	                break;  

36.	            }  

37.	            case 4:   

38.	            {  

39.	                printf("Exiting....");  

40.	                break;   

41.	            }  

42.	            default:  

43.	            {  

44.	                printf("Please Enter valid choice ");  

45.	            }   

46.	        };  

47.	    }  

48.	}   

49.	  

50.	void push ()  

51.	{  

52.	    int val;      

53.	    if (top == n )   

54.	    printf("\n Overflow");   

55.	    else   

56.	    {  

57.	        printf("Enter the value?");  

58.	        scanf("%d",&val);         

59.	        top = top +1;   

60.	        stack[top] = val;   

61.	    }   

62.	}   

63.	  

64.	void pop ()   

65.	{   

66.	    if(top == -1)   

67.	    printf("Underflow");  

68.	    else  

69.	    top = top -1;   

70.	}   

71.	void show()  

72.	{  

73.	    for (i=top;i>=0;i--)  

74.	    {  

75.	        printf("%d\n",stack[i]);  

76.	    }  

77.	    if(top == -1)   

78.	    {  

79.	        printf("Stack is empty");  

80.	    }  

81.	}  





































C implementation

1.	void pop()  

2.	{  

3.	    int item;  

4.	    struct node *ptr;  

5.	    if (head == NULL)  

6.	    {  

7.	        printf("Underflow");  

8.	    }  

9.	    else  

10.	    {  

11.	        item = head->val;  

12.	        ptr = head;  

13.	        head = head->next;  

14.	        free(ptr);  

15.	        printf("Item popped");  

16.	          

17.	    }  

18.	}  

Display the nodes (Traversing)

Displaying all the nodes of a stack needs traversing all the nodes of the linked list organized in the form of stack. For this purpose, we need to follow the following steps.

	Copy the head pointer into a temporary pointer.

	Move the temporary pointer through all the nodes of the list and print the value field attached to every node.

C Implementation

19.	void display()  

20.	{  

21.	    int i;  

22.	    struct node *ptr;  

23.	    ptr=head;  

24.	    if(ptr == NULL)  

25.	    {  

26.	        printf("Stack is empty\n");  

27.	    }  

28.	    else  

29.	    {  

30.	        printf("Printing Stack elements \n");  

31.	        while(ptr!=NULL)  

32.	        {  

33.	            printf("%d\n",ptr->val);  

34.	            ptr = ptr->next;  

35.	        }  

36.	    }  

37.	}  

Menu Driven program in C implementing all the stack operations using linked list 

#include <stdio.h>  

#include <stdlib.h>  

void push();  

void pop();  

void display();  

struct node   

{  

int val;  

struct node *next;  

};  

struct node *head;  

  

void main ()  

{  

    int choice=0;     

    printf("\n***Stack operations using linked list**\n");  

    printf("\n----------------------------------------------\n");  

    while(choice != 4)  

    {  

        printf("\n\nChose one from the below options...\n");  

        printf("\n1.Push\n2.Pop\n3.Show\n4.Exit");  

        printf("\n Enter your choice \n");        

        scanf("%d",&choice);  

        switch(choice)  

        {  

            case 1:  

            {   

                push();  

                break;  

            }  

            case 2:  

            {  

                pop();  

                break;  

            }  

            case 3:  

            {  

                display();  

                break;  

            }  

            case 4:   

            {  

                printf("Exiting....");  

                break;   

            }  

            default:  

            {  

                printf("Please Enter valid choice ");  

            }   

    };  

}  

}  

void push ()  

{  

    int val;  

    struct node *ptr = (struct node*)malloc(sizeof(struct node));   

    if(ptr == NULL)  

    {  

        printf("not able to push the element");   

    }  

    else   

    {  

        printf("Enter the value");  

        scanf("%d",&val);  

        if(head==NULL)  

        {         

            ptr->val = val;  

            ptr -> next = NULL;  

            head=ptr;  

        }   

        else   

        {  

            ptr->val = val;  

            ptr->next = head;  

            head=ptr;  

               

        }  

        printf("Item pushed");  

          

    }  

}  

  

void pop()  

{  

    int item;  

    struct node *ptr;  

    if (head == NULL)  

    {  

        printf("Underflow");  

    }  

    else  

    {  

        item = head->val;  

        ptr = head;  

        head = head->next;  

        free(ptr);  

        printf("Item popped");  

          

    }  

}  

void display()  

{  

    int i;  

    struct node *ptr;  

    ptr=head;  

    if(ptr == NULL)  

    {  

        printf("Stack is empty\n");  

    }  

    else  

    {  

        printf("Printing Stack elements \n");  

        while(ptr!=NULL)  

        {  

            printf("%d\n",ptr->val);  

            ptr = ptr->next;  

        }  

    }  

}  
